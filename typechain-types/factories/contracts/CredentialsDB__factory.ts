/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CredentialsDB,
  CredentialsDBInterface,
} from "../../contracts/CredentialsDB";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "credentialNo",
        type: "uint32",
      },
    ],
    name: "CredentialSavedInRegister",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "LeafInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "credentialsCounter",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "credentialsRegister",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsSchema",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsSchemaSet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
    ],
    name: "insertLeaf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "leavesArray",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
    ],
    name: "saveCredential",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "schema",
        type: "string",
      },
    ],
    name: "setCredentialsSchema",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfLeaves",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "viewArray",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600260006101000a81548160ff021916908315150217905550600064020000000860006101000a81548163ffffffff021916908363ffffffff1602179055503480156200005257600080fd5b506200007362000067620000ed60201b60201c565b620000f560201b60201c565b600373__$0c6eb7207c37accf1552a1c47686411ac0$__631095fbb49091602060006040518463ffffffff1660e01b8152600401620000b59392919062000228565b60006040518083038186803b158015620000ce57600080fd5b505af4158015620000e3573d6000803e3d6000fd5b5050505062000265565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8082525050565b6000819050919050565b620001d581620001c0565b82525050565b6000819050919050565b6000819050919050565b6000620002106200020a6200020484620001db565b620001e5565b620001c0565b9050919050565b6200022281620001ef565b82525050565b60006060820190506200023f6000830186620001b9565b6200024e6020830185620001ca565b6200025d604083018462000217565b949350505050565b61123c80620002756000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b720243411610066578063b7202434146101ee578063bde7e5681461020a578063f2fde38b1461023a578063fd54b22814610256576100cf565b80638da5cb5b146101965780639fa560e3146101b4578063a08e8a3d146101d2576100cf565b80631d3e890e146100d45780633a8b2849146101045780636e838b9b14610134578063715018a61461015057806374b7cb231461015a57806376694ce414610178575b600080fd5b6100ee60048036038101906100e99190610a9c565b610276565b6040516100fb9190610b62565b60405180910390f35b61011e60048036038101906101199190610a9c565b610321565b60405161012b9190610b93565b60405180910390f35b61014e60048036038101906101499190610ce3565b610340565b005b6101586103cd565b005b6101626103e1565b60405161016f9190610b62565b60405180910390f35b61018061046f565b60405161018d9190610d47565b60405180910390f35b61019e610482565b6040516101ab9190610da3565b60405180910390f35b6101bc6104ab565b6040516101c99190610ddd565b60405180910390f35b6101ec60048036038101906101e79190610e58565b6104c5565b005b61020860048036038101906102039190610a9c565b610691565b005b610224600480360381019061021f9190610a9c565b610694565b6040516102319190610b62565b60405180910390f35b610254600480360381019061024f9190610ee4565b610743565b005b61025e6107c7565b60405161026d93929190610f11565b60405180910390f35b64010000000881640100000000811061028e57600080fd5b0160009150905080546102a090610f77565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90610f77565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b505050505081565b600881640100000000811061033557600080fd5b016000915090505481565b6103486107df565b600260009054906101000a900460ff1615610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90610ff5565b60405180910390fd5b80600190805190602001906103ae929190610929565b506001600260006101000a81548160ff02191690831515021790555050565b6103d56107df565b6103df600061085d565b565b600180546103ee90610f77565b80601f016020809104026020016040519081016040528092919081815260200182805461041a90610f77565b80156104675780601f1061043c57610100808354040283529160200191610467565b820191906000526020600020905b81548152906001019060200180831161044a57829003601f168201915b505050505081565b600260009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b64020000000860009054906101000a900463ffffffff1681565b6104cd6107df565b828264010000000864020000000860009054906101000a900463ffffffff1663ffffffff16640100000000811061050757610506611015565b5b0191906105159291906109af565b50600373__$0c6eb7207c37accf1552a1c47686411ac0$__63168703fa9091836040518363ffffffff1660e01b815260040161055292919061105a565b60006040518083038186803b15801561056a57600080fd5b505af415801561057e573d6000803e3d6000fd5b5050505080600864020000000860009054906101000a900463ffffffff1663ffffffff1664010000000081106105b7576105b6611015565b5b0181905550640200000008600081819054906101000a900463ffffffff16809291906105e2906110b2565b91906101000a81548163ffffffff021916908363ffffffff160217905550507f604f5a492f8c1622a2e239876074a13b33ec11384fe2b310339ece35e8eecac7816003600101546040516106379291906110df565b60405180910390a17f9ed6bba91a3213fcd4171c5f056c0c2121710edbdd31b30e9b68a5563ad9fe9764020000000860009054906101000a900463ffffffff166040516106849190610ddd565b60405180910390a1505050565b50565b60606401000000088264010000000081106106b2576106b1611015565b5b0180546106be90610f77565b80601f01602080910402602001604051908101604052809291908181526020018280546106ea90610f77565b80156107375780601f1061070c57610100808354040283529160200191610737565b820191906000526020600020905b81548152906001019060200180831161071a57829003601f168201915b50505050509050919050565b61074b6107df565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b29061117a565b60405180910390fd5b6107c48161085d565b50565b60038060000154908060010154908060020154905083565b6107e7610921565b73ffffffffffffffffffffffffffffffffffffffff16610805610482565b73ffffffffffffffffffffffffffffffffffffffff161461085b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610852906111e6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b82805461093590610f77565b90600052602060002090601f016020900481019282610957576000855561099e565b82601f1061097057805160ff191683800117855561099e565b8280016001018555821561099e579182015b8281111561099d578251825591602001919060010190610982565b5b5090506109ab9190610a35565b5090565b8280546109bb90610f77565b90600052602060002090601f0160209004810192826109dd5760008555610a24565b82601f106109f657803560ff1916838001178555610a24565b82800160010185558215610a24579182015b82811115610a23578235825591602001919060010190610a08565b5b509050610a319190610a35565b5090565b5b80821115610a4e576000816000905550600101610a36565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610a7981610a66565b8114610a8457600080fd5b50565b600081359050610a9681610a70565b92915050565b600060208284031215610ab257610ab1610a5c565b5b6000610ac084828501610a87565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b03578082015181840152602081019050610ae8565b83811115610b12576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b3482610ac9565b610b3e8185610ad4565b9350610b4e818560208601610ae5565b610b5781610b18565b840191505092915050565b60006020820190508181036000830152610b7c8184610b29565b905092915050565b610b8d81610a66565b82525050565b6000602082019050610ba86000830184610b84565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bf082610b18565b810181811067ffffffffffffffff82111715610c0f57610c0e610bb8565b5b80604052505050565b6000610c22610a52565b9050610c2e8282610be7565b919050565b600067ffffffffffffffff821115610c4e57610c4d610bb8565b5b610c5782610b18565b9050602081019050919050565b82818337600083830152505050565b6000610c86610c8184610c33565b610c18565b905082815260208101848484011115610ca257610ca1610bb3565b5b610cad848285610c64565b509392505050565b600082601f830112610cca57610cc9610bae565b5b8135610cda848260208601610c73565b91505092915050565b600060208284031215610cf957610cf8610a5c565b5b600082013567ffffffffffffffff811115610d1757610d16610a61565b5b610d2384828501610cb5565b91505092915050565b60008115159050919050565b610d4181610d2c565b82525050565b6000602082019050610d5c6000830184610d38565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d8d82610d62565b9050919050565b610d9d81610d82565b82525050565b6000602082019050610db86000830184610d94565b92915050565b600063ffffffff82169050919050565b610dd781610dbe565b82525050565b6000602082019050610df26000830184610dce565b92915050565b600080fd5b600080fd5b60008083601f840112610e1857610e17610bae565b5b8235905067ffffffffffffffff811115610e3557610e34610df8565b5b602083019150836001820283011115610e5157610e50610dfd565b5b9250929050565b600080600060408486031215610e7157610e70610a5c565b5b600084013567ffffffffffffffff811115610e8f57610e8e610a61565b5b610e9b86828701610e02565b93509350506020610eae86828701610a87565b9150509250925092565b610ec181610d82565b8114610ecc57600080fd5b50565b600081359050610ede81610eb8565b92915050565b600060208284031215610efa57610ef9610a5c565b5b6000610f0884828501610ecf565b91505092915050565b6000606082019050610f266000830186610b84565b610f336020830185610b84565b610f406040830184610b84565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f8f57607f821691505b60208210811415610fa357610fa2610f48565b5b50919050565b7f536368656d6120616c7265616479207365740000000000000000000000000000600082015250565b6000610fdf601283610ad4565b9150610fea82610fa9565b602082019050919050565b6000602082019050818103600083015261100e81610fd2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8082525050565b61105481610a66565b82525050565b600060408201905061106f6000830185611044565b61107c602083018461104b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110bd82610dbe565b915063ffffffff8214156110d4576110d3611083565b5b600182019050919050565b60006040820190506110f46000830185610b84565b6111016020830184610b84565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611164602683610ad4565b915061116f82611108565b604082019050919050565b6000602082019050818103600083015261119381611157565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111d0602083610ad4565b91506111db8261119a565b602082019050919050565b600060208201905081810360008301526111ff816111c3565b905091905056fea264697066735822122071a26ec3f6554c04d08f7a6a14007febfbe2c95bc7350d1dc7fa6e62e25d6a1c64736f6c63430008090033";

type CredentialsDBConstructorParams =
  | [linkLibraryAddresses: CredentialsDBLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CredentialsDBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class CredentialsDB__factory extends ContractFactory {
  constructor(...args: CredentialsDBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        CredentialsDB__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: CredentialsDBLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$0c6eb7207c37accf1552a1c47686411ac0\\$__", "g"),
      linkLibraryAddresses[
        "@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol:IncrementalBinaryTree"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CredentialsDB> {
    return super.deploy(overrides || {}) as Promise<CredentialsDB>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CredentialsDB {
    return super.attach(address) as CredentialsDB;
  }
  override connect(signer: Signer): CredentialsDB__factory {
    return super.connect(signer) as CredentialsDB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CredentialsDBInterface {
    return new utils.Interface(_abi) as CredentialsDBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CredentialsDB {
    return new Contract(address, _abi, signerOrProvider) as CredentialsDB;
  }
}

export interface CredentialsDBLibraryAddresses {
  ["@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol:IncrementalBinaryTree"]: string;
}
