/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CredentialsDB,
  CredentialsDBInterface,
} from "../../contracts/CredentialsDB";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "credentialNo",
        type: "uint32",
      },
    ],
    name: "CredentialSavedInRegister",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "LeafInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "credentialsCounter",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "credentialsRegister",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsSchema",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsSchemaSet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
    ],
    name: "insertLeaf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "saveCredential",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "schema",
        type: "string",
      },
    ],
    name: "setCredentialsSchema",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfLeaves",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "viewArray",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600260006101000a81548160ff021916908315150217905550600061040860006101000a81548163ffffffff021916908363ffffffff1602179055503480156200004f57600080fd5b506200007062000064620000ea60201b60201c565b620000f260201b60201c565b600373__$0c6eb7207c37accf1552a1c47686411ac0$__631095fbb49091600a60006040518463ffffffff1660e01b8152600401620000b29392919062000225565b60006040518083038186803b158015620000cb57600080fd5b505af4158015620000e0573d6000803e3d6000fd5b5050505062000262565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8082525050565b6000819050919050565b620001d281620001bd565b82525050565b6000819050919050565b6000819050919050565b60006200020d620002076200020184620001d8565b620001e2565b620001bd565b9050919050565b6200021f81620001ec565b82525050565b60006060820190506200023c6000830186620001b6565b6200024b6020830185620001c7565b6200025a604083018462000214565b949350505050565b61114880620002726000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101675780639fa560e314610185578063b7202434146101a3578063bde7e568146101bf578063f2fde38b146101ef578063fd54b2281461020b576100b4565b80631d3e890e146100b95780636e838b9b146100e9578063715018a61461010557806374444f291461010f57806374b7cb231461012b57806376694ce414610149575b600080fd5b6100d360048036038101906100ce91906109d6565b61022b565b6040516100e09190610a9c565b60405180910390f35b61010360048036038101906100fe9190610bf3565b6102cf565b005b61010d61035c565b005b61012960048036038101906101249190610c9c565b610370565b005b610133610447565b6040516101409190610a9c565b60405180910390f35b6101516104d5565b60405161015e9190610d04565b60405180910390f35b61016f6104e8565b60405161017c9190610d60565b60405180910390f35b61018d610511565b60405161019a9190610d9a565b60405180910390f35b6101bd60048036038101906101b891906109d6565b610528565b005b6101d960048036038101906101d491906109d6565b6105d5565b6040516101e69190610a9c565b60405180910390f35b61020960048036038101906102049190610de1565b61067d565b005b610213610701565b60405161022293929190610e1d565b60405180910390f35b600881610400811061023c57600080fd5b01600091509050805461024e90610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461027a90610e83565b80156102c75780601f1061029c576101008083540402835291602001916102c7565b820191906000526020600020905b8154815290600101906020018083116102aa57829003601f168201915b505050505081565b6102d7610719565b600260009054906101000a900460ff1615610327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031e90610f01565b60405180910390fd5b806001908051906020019061033d929190610863565b506001600260006101000a81548160ff02191690831515021790555050565b610364610719565b61036e6000610797565b565b610378610719565b8181600861040860009054906101000a900463ffffffff1663ffffffff1661040081106103a8576103a7610f21565b5b0191906103b69291906108e9565b50610408600081819054906101000a900463ffffffff16809291906103da90610f7f565b91906101000a81548163ffffffff021916908363ffffffff160217905550507f9ed6bba91a3213fcd4171c5f056c0c2121710edbdd31b30e9b68a5563ad9fe9761040860009054906101000a900463ffffffff1660405161043b9190610d9a565b60405180910390a15050565b6001805461045490610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461048090610e83565b80156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b505050505081565b600260009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61040860009054906101000a900463ffffffff1681565b600373__$0c6eb7207c37accf1552a1c47686411ac0$__63168703fa9091836040518363ffffffff1660e01b8152600401610564929190610fc2565b60006040518083038186803b15801561057c57600080fd5b505af4158015610590573d6000803e3d6000fd5b505050507f604f5a492f8c1622a2e239876074a13b33ec11384fe2b310339ece35e8eecac7816003600101546040516105ca929190610feb565b60405180910390a150565b606060088261040081106105ec576105eb610f21565b5b0180546105f890610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461062490610e83565b80156106715780601f1061064657610100808354040283529160200191610671565b820191906000526020600020905b81548152906001019060200180831161065457829003601f168201915b50505050509050919050565b610685610719565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec90611086565b60405180910390fd5b6106fe81610797565b50565b60038060000154908060010154908060020154905083565b61072161085b565b73ffffffffffffffffffffffffffffffffffffffff1661073f6104e8565b73ffffffffffffffffffffffffffffffffffffffff1614610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c906110f2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b82805461086f90610e83565b90600052602060002090601f01602090048101928261089157600085556108d8565b82601f106108aa57805160ff19168380011785556108d8565b828001600101855582156108d8579182015b828111156108d75782518255916020019190600101906108bc565b5b5090506108e5919061096f565b5090565b8280546108f590610e83565b90600052602060002090601f016020900481019282610917576000855561095e565b82601f1061093057803560ff191683800117855561095e565b8280016001018555821561095e579182015b8281111561095d578235825591602001919060010190610942565b5b50905061096b919061096f565b5090565b5b80821115610988576000816000905550600101610970565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109b3816109a0565b81146109be57600080fd5b50565b6000813590506109d0816109aa565b92915050565b6000602082840312156109ec576109eb610996565b5b60006109fa848285016109c1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a3d578082015181840152602081019050610a22565b83811115610a4c576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a6e82610a03565b610a788185610a0e565b9350610a88818560208601610a1f565b610a9181610a52565b840191505092915050565b60006020820190508181036000830152610ab68184610a63565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b0082610a52565b810181811067ffffffffffffffff82111715610b1f57610b1e610ac8565b5b80604052505050565b6000610b3261098c565b9050610b3e8282610af7565b919050565b600067ffffffffffffffff821115610b5e57610b5d610ac8565b5b610b6782610a52565b9050602081019050919050565b82818337600083830152505050565b6000610b96610b9184610b43565b610b28565b905082815260208101848484011115610bb257610bb1610ac3565b5b610bbd848285610b74565b509392505050565b600082601f830112610bda57610bd9610abe565b5b8135610bea848260208601610b83565b91505092915050565b600060208284031215610c0957610c08610996565b5b600082013567ffffffffffffffff811115610c2757610c2661099b565b5b610c3384828501610bc5565b91505092915050565b600080fd5b600080fd5b60008083601f840112610c5c57610c5b610abe565b5b8235905067ffffffffffffffff811115610c7957610c78610c3c565b5b602083019150836001820283011115610c9557610c94610c41565b5b9250929050565b60008060208385031215610cb357610cb2610996565b5b600083013567ffffffffffffffff811115610cd157610cd061099b565b5b610cdd85828601610c46565b92509250509250929050565b60008115159050919050565b610cfe81610ce9565b82525050565b6000602082019050610d196000830184610cf5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d4a82610d1f565b9050919050565b610d5a81610d3f565b82525050565b6000602082019050610d756000830184610d51565b92915050565b600063ffffffff82169050919050565b610d9481610d7b565b82525050565b6000602082019050610daf6000830184610d8b565b92915050565b610dbe81610d3f565b8114610dc957600080fd5b50565b600081359050610ddb81610db5565b92915050565b600060208284031215610df757610df6610996565b5b6000610e0584828501610dcc565b91505092915050565b610e17816109a0565b82525050565b6000606082019050610e326000830186610e0e565b610e3f6020830185610e0e565b610e4c6040830184610e0e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e9b57607f821691505b60208210811415610eaf57610eae610e54565b5b50919050565b7f536368656d6120616c7265616479207365740000000000000000000000000000600082015250565b6000610eeb601283610a0e565b9150610ef682610eb5565b602082019050919050565b60006020820190508181036000830152610f1a81610ede565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f8a82610d7b565b915063ffffffff821415610fa157610fa0610f50565b5b600182019050919050565b8082525050565b610fbc816109a0565b82525050565b6000604082019050610fd76000830185610fac565b610fe46020830184610fb3565b9392505050565b60006040820190506110006000830185610e0e565b61100d6020830184610e0e565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611070602683610a0e565b915061107b82611014565b604082019050919050565b6000602082019050818103600083015261109f81611063565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110dc602083610a0e565b91506110e7826110a6565b602082019050919050565b6000602082019050818103600083015261110b816110cf565b905091905056fea26469706673582212207606f5f75a08edd99b9a12d81ec07940550abaceea08e5101e9b35fabbdc1d1164736f6c63430008090033";

type CredentialsDBConstructorParams =
  | [linkLibraryAddresses: CredentialsDBLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CredentialsDBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class CredentialsDB__factory extends ContractFactory {
  constructor(...args: CredentialsDBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        CredentialsDB__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: CredentialsDBLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$0c6eb7207c37accf1552a1c47686411ac0\\$__", "g"),
      linkLibraryAddresses[
        "@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol:IncrementalBinaryTree"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CredentialsDB> {
    return super.deploy(overrides || {}) as Promise<CredentialsDB>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CredentialsDB {
    return super.attach(address) as CredentialsDB;
  }
  override connect(signer: Signer): CredentialsDB__factory {
    return super.connect(signer) as CredentialsDB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CredentialsDBInterface {
    return new utils.Interface(_abi) as CredentialsDBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CredentialsDB {
    return new Contract(address, _abi, signerOrProvider) as CredentialsDB;
  }
}

export interface CredentialsDBLibraryAddresses {
  ["@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol:IncrementalBinaryTree"]: string;
}
