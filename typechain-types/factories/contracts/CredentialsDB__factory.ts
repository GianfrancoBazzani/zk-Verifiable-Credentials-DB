/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CredentialsDB,
  CredentialsDBInterface,
} from "../../contracts/CredentialsDB";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "credentialNo",
        type: "uint32",
      },
    ],
    name: "CredentialSavedInRegister",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "LeafInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "TREE_DEPTH",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsCounter",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "credentialsRegister",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsSchema",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "credentialsSchemaSet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLeavesArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "leavesArray",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "leaf",
        type: "uint256",
      },
    ],
    name: "saveCredential",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "schema",
        type: "string",
      },
    ],
    name: "setCredentialsSchema",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfLeaves",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "viewArray",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600260006101000a81548160ff0219169083151502179055506000600a60006101000a81548163ffffffff021916908363ffffffff1602179055503480156200004e57600080fd5b506040516200178b3803806200178b833981810160405281019062000074919062000286565b62000094620000886200015060201b60201c565b6200015860201b60201c565b600373__$0c6eb7207c37accf1552a1c47686411ac0$__631095fbb49091601060006040518463ffffffff1660e01b8152600401620000d6939291906200035f565b60006040518083038186803b158015620000ef57600080fd5b505af415801562000104573d6000803e3d6000fd5b5050505080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200039c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200024e8262000221565b9050919050565b620002608162000241565b81146200026c57600080fd5b50565b600081519050620002808162000255565b92915050565b6000602082840312156200029f576200029e6200021c565b5b6000620002af848285016200026f565b91505092915050565b8082525050565b600063ffffffff82169050919050565b6000819050919050565b6000819050919050565b600062000304620002fe620002f884620002bf565b620002d9565b620002cf565b9050919050565b6200031681620002e3565b82525050565b6000819050919050565b600062000347620003416200033b846200031c565b620002d9565b620002cf565b9050919050565b620003598162000326565b82525050565b6000606082019050620003766000830186620002b8565b6200038560208301856200030b565b6200039460408301846200034e565b949350505050565b6113df80620003ac6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806376694ce411610097578063bde7e56811610066578063bde7e56814610250578063f165053614610280578063f2fde38b1461029e578063fd54b228146102ba576100f5565b806376694ce4146101da5780638da5cb5b146101f85780639fa560e314610216578063a08e8a3d14610234576100f5565b80633a8b2849116100d35780633a8b2849146101665780636e838b9b14610196578063715018a6146101b257806374b7cb23146101bc576100f5565b80631d3e890e146100fa5780632b7ac3f31461012a57806332cf999114610148575b600080fd5b610114600480360381019061010f9190610b5f565b6102da565b6040516101219190610c25565b60405180910390f35b610132610386565b60405161013f9190610c88565b60405180910390f35b6101506103ac565b60405161015d9190610d61565b60405180910390f35b610180600480360381019061017b9190610b5f565b610404565b60405161018d9190610d92565b60405180910390f35b6101b060048036038101906101ab9190610ee2565b610428565b005b6101ba6104b5565b005b6101c46104c9565b6040516101d19190610c25565b60405180910390f35b6101e2610557565b6040516101ef9190610f46565b60405180910390f35b61020061056a565b60405161020d9190610c88565b60405180910390f35b61021e610593565b60405161022b9190610f80565b60405180910390f35b61024e60048036038101906102499190610ffb565b6105a9565b005b61026a60048036038101906102659190610b5f565b610751565b6040516102779190610c25565b60405180910390f35b610288610801565b6040516102959190610f80565b60405180910390f35b6102b860048036038101906102b39190611087565b610806565b005b6102c261088a565b6040516102d1939291906110b4565b60405180910390f35b600981815481106102ea57600080fd5b9060005260206000200160009150905080546103059061111a565b80601f01602080910402602001604051908101604052809291908181526020018280546103319061111a565b801561037e5780601f106103535761010080835404028352916020019161037e565b820191906000526020600020905b81548152906001019060200180831161036157829003601f168201915b505050505081565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060088054806020026020016040519081016040528092919081815260200182805480156103fa57602002820191906000526020600020905b8154815260200190600101908083116103e6575b5050505050905090565b6008818154811061041457600080fd5b906000526020600020016000915090505481565b6104306108a2565b600260009054906101000a900460ff1615610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790611198565b60405180910390fd5b80600190805190602001906104969291906109ec565b506001600260006101000a81548160ff02191690831515021790555050565b6104bd6108a2565b6104c76000610920565b565b600180546104d69061111a565b80601f01602080910402602001604051908101604052809291908181526020018280546105029061111a565b801561054f5780601f106105245761010080835404028352916020019161054f565b820191906000526020600020905b81548152906001019060200180831161053257829003601f168201915b505050505081565b600260009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a60009054906101000a900463ffffffff1681565b6105b16108a2565b60098383909180600181540180825580915050600190039060005260206000200160009091929091929091929091925091906105ee929190610a72565b50600373__$0c6eb7207c37accf1552a1c47686411ac0$__63168703fa9091836040518363ffffffff1660e01b815260040161062b9291906111ce565b60006040518083038186803b15801561064357600080fd5b505af4158015610657573d6000803e3d6000fd5b505050506008819080600181540180825580915050600190039060005260206000200160009091909190915055600a600081819054906101000a900463ffffffff16809291906106a690611226565b91906101000a81548163ffffffff021916908363ffffffff160217905550507f604f5a492f8c1622a2e239876074a13b33ec11384fe2b310339ece35e8eecac7816003600101546040516106fb929190611253565b60405180910390a17f9ed6bba91a3213fcd4171c5f056c0c2121710edbdd31b30e9b68a5563ad9fe97600a60009054906101000a900463ffffffff166040516107449190610f80565b60405180910390a1505050565b6060600982815481106107675761076661127c565b5b90600052602060002001805461077c9061111a565b80601f01602080910402602001604051908101604052809291908181526020018280546107a89061111a565b80156107f55780601f106107ca576101008083540402835291602001916107f5565b820191906000526020600020905b8154815290600101906020018083116107d857829003601f168201915b50505050509050919050565b601081565b61080e6108a2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561087e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108759061131d565b60405180910390fd5b61088781610920565b50565b60038060000154908060010154908060020154905083565b6108aa6109e4565b73ffffffffffffffffffffffffffffffffffffffff166108c861056a565b73ffffffffffffffffffffffffffffffffffffffff161461091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590611389565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8280546109f89061111a565b90600052602060002090601f016020900481019282610a1a5760008555610a61565b82601f10610a3357805160ff1916838001178555610a61565b82800160010185558215610a61579182015b82811115610a60578251825591602001919060010190610a45565b5b509050610a6e9190610af8565b5090565b828054610a7e9061111a565b90600052602060002090601f016020900481019282610aa05760008555610ae7565b82601f10610ab957803560ff1916838001178555610ae7565b82800160010185558215610ae7579182015b82811115610ae6578235825591602001919060010190610acb565b5b509050610af49190610af8565b5090565b5b80821115610b11576000816000905550600101610af9565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b3c81610b29565b8114610b4757600080fd5b50565b600081359050610b5981610b33565b92915050565b600060208284031215610b7557610b74610b1f565b5b6000610b8384828501610b4a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bc6578082015181840152602081019050610bab565b83811115610bd5576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bf782610b8c565b610c018185610b97565b9350610c11818560208601610ba8565b610c1a81610bdb565b840191505092915050565b60006020820190508181036000830152610c3f8184610bec565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c7282610c47565b9050919050565b610c8281610c67565b82525050565b6000602082019050610c9d6000830184610c79565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610cd881610b29565b82525050565b6000610cea8383610ccf565b60208301905092915050565b6000602082019050919050565b6000610d0e82610ca3565b610d188185610cae565b9350610d2383610cbf565b8060005b83811015610d54578151610d3b8882610cde565b9750610d4683610cf6565b925050600181019050610d27565b5085935050505092915050565b60006020820190508181036000830152610d7b8184610d03565b905092915050565b610d8c81610b29565b82525050565b6000602082019050610da76000830184610d83565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610def82610bdb565b810181811067ffffffffffffffff82111715610e0e57610e0d610db7565b5b80604052505050565b6000610e21610b15565b9050610e2d8282610de6565b919050565b600067ffffffffffffffff821115610e4d57610e4c610db7565b5b610e5682610bdb565b9050602081019050919050565b82818337600083830152505050565b6000610e85610e8084610e32565b610e17565b905082815260208101848484011115610ea157610ea0610db2565b5b610eac848285610e63565b509392505050565b600082601f830112610ec957610ec8610dad565b5b8135610ed9848260208601610e72565b91505092915050565b600060208284031215610ef857610ef7610b1f565b5b600082013567ffffffffffffffff811115610f1657610f15610b24565b5b610f2284828501610eb4565b91505092915050565b60008115159050919050565b610f4081610f2b565b82525050565b6000602082019050610f5b6000830184610f37565b92915050565b600063ffffffff82169050919050565b610f7a81610f61565b82525050565b6000602082019050610f956000830184610f71565b92915050565b600080fd5b600080fd5b60008083601f840112610fbb57610fba610dad565b5b8235905067ffffffffffffffff811115610fd857610fd7610f9b565b5b602083019150836001820283011115610ff457610ff3610fa0565b5b9250929050565b60008060006040848603121561101457611013610b1f565b5b600084013567ffffffffffffffff81111561103257611031610b24565b5b61103e86828701610fa5565b9350935050602061105186828701610b4a565b9150509250925092565b61106481610c67565b811461106f57600080fd5b50565b6000813590506110818161105b565b92915050565b60006020828403121561109d5761109c610b1f565b5b60006110ab84828501611072565b91505092915050565b60006060820190506110c96000830186610d83565b6110d66020830185610d83565b6110e36040830184610d83565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061113257607f821691505b60208210811415611146576111456110eb565b5b50919050565b7f536368656d6120616c7265616479207365740000000000000000000000000000600082015250565b6000611182601283610b97565b915061118d8261114c565b602082019050919050565b600060208201905081810360008301526111b181611175565b9050919050565b8082525050565b6111c881610b29565b82525050565b60006040820190506111e360008301856111b8565b6111f060208301846111bf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123182610f61565b915063ffffffff821415611248576112476111f7565b5b600182019050919050565b60006040820190506112686000830185610d83565b6112756020830184610d83565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611307602683610b97565b9150611312826112ab565b604082019050919050565b60006020820190508181036000830152611336816112fa565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611373602083610b97565b915061137e8261133d565b602082019050919050565b600060208201905081810360008301526113a281611366565b905091905056fea2646970667358221220f41050bec012036ccebcac4bd2167e68aebb83f6ab9ec884c45ce8370c63c85664736f6c63430008090033";

type CredentialsDBConstructorParams =
  | [linkLibraryAddresses: CredentialsDBLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CredentialsDBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class CredentialsDB__factory extends ContractFactory {
  constructor(...args: CredentialsDBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        CredentialsDB__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: CredentialsDBLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$0c6eb7207c37accf1552a1c47686411ac0\\$__", "g"),
      linkLibraryAddresses[
        "@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol:IncrementalBinaryTree"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CredentialsDB> {
    return super.deploy(_verifier, overrides || {}) as Promise<CredentialsDB>;
  }
  override getDeployTransaction(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override attach(address: string): CredentialsDB {
    return super.attach(address) as CredentialsDB;
  }
  override connect(signer: Signer): CredentialsDB__factory {
    return super.connect(signer) as CredentialsDB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CredentialsDBInterface {
    return new utils.Interface(_abi) as CredentialsDBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CredentialsDB {
    return new Contract(address, _abi, signerOrProvider) as CredentialsDB;
  }
}

export interface CredentialsDBLibraryAddresses {
  ["@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol:IncrementalBinaryTree"]: string;
}
